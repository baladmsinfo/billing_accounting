generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  password         String
  name             String
  role             Role      @default(USER)
  status           Boolean   @default(false)
  mobile_verifited Boolean   @default(false)
  email_verifited  Boolean   @default(false)
  invited          Boolean   @default(false)
  inviteToken      String?
  inviteTokenExpiry DateTime?

  companies        Company[]   // ðŸ‘ˆ user can own many companies

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Company {
  id               String       @id @default(uuid())
  name             String
  gstNumber        String?

  ownerId          String
  owner            User         @relation(fields: [ownerId], references: [id]) // many-to-one relation

  branches         Branch[]     
  accounts         Account[]
  journals         JournalEntry[]
  invoices         Invoice[]
  products         Product[]
  items            Item[]
  customers        Customer[]
  taxRates         TaxRate[]
  payments         Payment[]
  stock            StockLedger[]
  categories       Category[]
  invoiceTax       InvoiceTax[]
  vendors          Vendor[]
  carts            Cart[] 
  primaryEmail     String
  secondaryEmail   String?
  primaryPhoneNo   String
  secondaryPhoneNo String?

  addressLine1     String
  addressLine2     String?
  addressLine3     String?
  city             String
  state            String
  pincode          Int
  companyType      String

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Branch {
  id          String   @id @default(uuid())
  name        String
  address     String?
  city        String?
  state       String?
  pincode     Int?

  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Account {
  id        String         @id @default(uuid())
  name      String
  code      String
  type      AccountType
  companyId String
  company   Company        @relation(fields: [companyId], references: [id])
  parentId  String?
  parent    Account?       @relation("AccountParent", fields: [parentId], references: [id])
  children  Account[]      @relation("AccountParent")
  journals  JournalEntry[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}

model JournalEntry {
  id          String   @id @default(uuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  date        DateTime
  description String
  debit       Float
  credit      Float
  accountId   String
  account     Account  @relation(fields: [accountId], references: [id])
  createdAt   DateTime @default(now())
}

model Category {
  id          String      @id @default(uuid())
  name        String      @unique
  description String?

  companyId   String
  company     Company     @relation(fields: [companyId], references: [id])

  parentId    String?
  parent      Category?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[]  @relation("CategoryHierarchy")

  products    Product[]   @relation("ParentCategory")   // products under this as parent
  subProducts Product[]   @relation("SubCategory")      // products under this as subcategory

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Product {
  id             String        @id @default(uuid())
  name           String
  sku            String        @unique
  description    String?

  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])

  categoryId     String?       // Parent category
  category       Category?     @relation("ParentCategory", fields: [categoryId], references: [id])

  subCategoryId  String?       // Child category
  subCategory    Category?     @relation("SubCategory", fields: [subCategoryId], references: [id])

  items          Item[]
  invoiceItems   InvoiceItem[]
  cartItems      CartItem[]

  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Payment {
  id          String      @id @default(uuid())
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id])

  invoiceId   String
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])

  amount      Float
  method      PaymentMethod
  referenceNo String?     // e.g., UPI txn id, cheque no, etc.
  date        DateTime    @default(now())
  note        String?

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  UPI
  CHEQUE
  CARD
  OTHER
}

model Item {
  id           String        @id @default(uuid())
  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  sku          String
  price        Float
  quantity     Int           @default(0)
  location     String?
  companyId    String
  company      Company       @relation(fields: [companyId], references: [id])
  invoiceItems InvoiceItem[]
  stock        StockLedger[]
  cartItems    CartItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([sku, companyId])
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  gstin     String?
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  invoices  Invoice[]
  carts     Cart[] 
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum InvoiceType {
  SALE
  PURCHASE
  RETURN
  OTHER
}

model Cart {
  id         String      @id @default(uuid())
  companyId  String
  company    Company     @relation(fields: [companyId], references: [id])
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  status     CartStatus  @default(ACTIVE)
  items      CartItem[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum CartStatus {
  ACTIVE
  CHECKEDOUT
  CANCELLED
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  taxRateId String?
  taxRate   TaxRate? @relation(fields: [taxRateId], references: [id])
  total     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}


model Vendor {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  gstin     String    @unique
  companyId String
  company   Company   @relation(fields: [companyId], references: [id])
  invoices  Invoice[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Invoice {
  id            String        @id @default(uuid())
  invoiceNumber String
  companyId     String
  company       Company       @relation(fields: [companyId], references: [id])
  
  // Either Customer (SALE) or Vendor (PURCHASE)
  customerId    String?
  customer      Customer?     @relation(fields: [customerId], references: [id])

  vendorId      String?
  vendor        Vendor?       @relation(fields: [vendorId], references: [id])

  date          DateTime
  dueDate       DateTime?
  status        InvoiceStatus @default(PENDING)
  type          InvoiceType   @default(SALE)
  items         InvoiceItem[]
  payments      Payment[]
  invoiceTax    InvoiceTax[]
  totalAmount   Float
  taxAmount     Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum InvoiceStatus {
  PENDING
  PARTIAL
  PAYLATER
  PAID
  CANCELLED
}

model InvoiceTax {
  id          String      @id @default(uuid())
  invoiceId   String
  invoice     Invoice     @relation(fields: [invoiceId], references: [id])
  taxRateId   String
  taxRate     TaxRate     @relation(fields: [taxRateId], references: [id])
  companyId   String
  company     Company     @relation(fields: [companyId], references: [id])
  amount      Float
  invoiceType InvoiceType
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  status    InvoiceItemStatus  @default(ORDERED)
  taxRateId String?
  taxRate   TaxRate? @relation(fields: [taxRateId], references: [id])
  total     Float
}

enum InvoiceItemStatus {
  ORDERED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model TaxRate {
  id        String        @id @default(uuid())
  name      String
  rate      Float
  type      TaxType
  companyId String
  company   Company       @relation(fields: [companyId], references: [id])
  items     InvoiceItem[]
  invoiceTax    InvoiceTax[]
  cartItems    CartItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum TaxType {
  GST
  IGST
  SGST
  CGST
}

model StockLedger {
  id        String       @id @default(uuid())
  companyId String
  company   Company      @relation(fields: [companyId], references: [id])
  itemId    String
  item      Item         @relation(fields: [itemId], references: [id])
  date      DateTime     @default(now())
  type      StockTxnType
  quantity  Int
  note      String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum StockTxnType {
  PURCHASE
  SALE
  SALE_RETURN
  ADJUSTMENT
}